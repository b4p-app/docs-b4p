/* ** FUNCTION:	regressData** Given a set of data points data[1...ROWS][1...COLS],  two column numbers* (col1, col2), and the start and end rows (row1, row2), create two vectors* of non-missing data (x[], y[]) that may be lagged.  These two vectors are fit* to a straight line y = a + bx. Returned are slope (b), standard error estimate * of slope (sigb), coefficient of determination (rSquare), and t-value (tval).**/#include "tcrit.cp"#include <math.h>void regressData(float *data[], float x[], float y[],			long col1, long col2, long row1, long row2,			int lag,float *b, float *sigb, 			float *rSqr, float *tval , float *tcrit ){	long	i,k, ndata;	int		nlag=0;		float	totDOF,regDOF,resDOF,			sx=0.0,sy=0.0,sxy=0.0,syy=0.0,sxx=0.0,			ssxy,ssxx,ssyy, 			totSS,regSS,resSS, 			totMS,regMS,resMS,Sxy;		ndata=row2-row1+1;			//raw data length	//calculate nrows with lagged data	nlag = abs(lag);			//number of lags	ndata = ndata - nlag;		//adjusted lag data length	//build vectors of non-missing, lagged rows	i=1;	for( k=row1; k<= row2; k++) 	{		if(lag>=0)			{			if( (data[ k ][col1] != -999) && (data[ k+nlag ][col2] !=-999) ) 				{				x[i]= data[ k ][col1];				y[i]= data[ k+nlag ][col2];				i++;							}				}		if(lag<0)			{			if( (data[ k+nlag ][col1] != -999) && (data[ k ][col2] !=-999) ) 				{				x[i]= data[ k+nlag ][col1];				y[i]= data[ k+nlag ][col2];				i++;							}				}				}	ndata = i-1;	//the final loop overcounts by one, so decrement	//return default values if insufficient data		if( ndata <= 3)		{ 		*b=-999; *sigb=-999; *rSqr=-999;*tval=-999; *tcrit=-999;		return;		}	//begin calculations 	totDOF = ndata -1;			//total DOF	regDOF = 1;					//regression DOF	resDOF = ndata - 2;			//residual DOF				for (i=1;i<=ndata;i++) {		sx += x[i];		sy += y[i];		sxy += ( x[i] * y[i] );		syy += ( y[i] * y[i] );		sxx += ( x[i] * x[i] );	}	ssxy  = sxy - (sx*sy)/ndata;		//sum of squares	ssxx  = sxx - (sx*sx)/ndata;	ssyy  = syy - (sy*sy)/ndata;		totSS = ssyy;						//sum of squares	regSS = (ssxy*ssxy)/ssxx;	resSS = totSS - regSS;					totMS = totSS/totDOF;				//mean squares	regMS = regSS/regDOF;	resMS = resSS/resDOF;	Sxy =  sqrt(resMS);		*b		= ssxy/ssxx;				*sigb	= sqrt(Sxy*Sxy/ssxx) ;		//take real part-implicit	if( *sigb==0 ) *sigb= .000001 ; 	//avoid zero division	*tval	= abs( *b/(*sigb) );			*rSqr	= regSS/totSS ;	//external function call	*tcrit = tCrit(totDOF);				}