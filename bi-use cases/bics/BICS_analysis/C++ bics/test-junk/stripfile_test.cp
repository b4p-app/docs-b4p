//reopen a file stream and abstract tab delimited words from first row//	INFILE.seekg(0, ios::beg);		//rewind//	while (! INFILE.eof())//	cout.put( (char)INFILE.get() );/* works finefor(char x =(char)INFILE.rdbuf()->sgetc(); x !=EOF;        x =(char)INFILE.rdbuf()->snextc())                cout.put(x);*//*//adjust number of float rows in data	cout<<"Total rows scanned:\t"<<ROWS<<endl;	long int ROWS_skip=1L;	cout<<"Does first row contain variable names?(Y/N):";	cin >> ansYN ;	ansYN = toupper(ansYN);	if ( ansYN == 'Y')		{		ROWS = ROWS - ROWS_skip;		cout<<"Total float rows: "<<ROWS<<endl;			}		else		cout<<"Total float rows: "<<ROWS<<endl;*/	/*				INFILE.getline(line,sizeof(line), '\t' );				j=1;						//j=words in line		k=0;						//k=chars in line		long m;						//m= chars in word				while( line[k] != '\n') 			{ 			m=0;								while( line[k] != '\t')				{				var[j][m] = line[k];	//build string a character at a time				m++;				k++;				};			var[j][m] = '\0';		//null terminate char array to make			j++;					//string const, then increment word count				k++;					};			var[j][m] = '\0';		//null terminate final word			*/	/*	//print words read					cout<<lineSeparator<<endl;		for( j=1; j<=COLS; j++) cout<<"col: "<<j<<" "<<var[j]<<endl;		cout<<endl<<lineSeparator<<endl;			*/						/*				int COLS_del;	cout<<"How many columns to delete: ";	cin >> COLS_del;	int col[COLS_del ];	//make 1-offset vector	for(i=1; i<= COLS_del; i++)		{			cout<<"column "<<i<<" deleted = ";			cin>> *col[i];		}*//*	cout<<"num total cols: ";	cin>>COLS;	for(int m=0; m<5; m++)		{		for(i=0; i<=COLS; i++)			{						INFILE.getline(word,sizeof(word), '\t' );			cout<<word<<'\t';			}*/		}							/*		for( i=0; i<= sizeof(line) ; i++)			{			if( line[i] != '\t')				cout<<  line[i];			}*/