(*^::[paletteColors = 128; 	fontset = title, "New York", 24, L3, center, bold, nohscroll;	fontset = subtitle, "New York", 18, L2, center, bold, nohscroll;	fontset = subsubtitle, "New York", 14, L2, center, bold, nohscroll;	fontset = section, "New York", 14, L2, bold, nohscroll, grayBox;	fontset = subsection, "New York", 12, L2, bold, nohscroll, blackBox;	fontset = subsubsection, "New York", 10, L2, bold, nohscroll, whiteBox;	fontset = text, "New York", 12, L2, nohscroll;	fontset = smalltext, "New York", 10, L2, nohscroll;	fontset = input, "Courier", 12, L2, bold;	fontset = output, "Courier", 12, L2, nowordwrap;	fontset = message, "Courier", 12, L2, R65535, nowordwrap;	fontset = print, "Courier", 12, L2, nowordwrap;	fontset = info, "Courier", 12, L2, nowordwrap;	fontset = postscript, "Courier", 12, L2, nowordwrap;	fontset = name, "Geneva", 10, L2, italic, B65535, nowordwrap, nohscroll;	fontset = header, "Times", 10, L2;	fontset = footer, "Times", 12, L2, center;	fontset = help, "Geneva", 10, L2, nohscroll;	fontset = clipboard, "New York", 12, L2;	fontset = completions, "New York", 12, L2, nowordwrap;	fontset = network, "Courier", 10, L2, nowordwrap;	fontset = graphlabel, "Courier", 12, L2, nowordwrap;	fontset = special1, "New York", 12, L2, nowordwrap;	fontset = special2, "New York", 12, L2, center, nowordwrap;	fontset = special3, "New York", 12, L2, right, nowordwrap;	fontset = special4, "New York", 12, L2, nowordwrap;	fontset = special5, "New York", 12, L2, nowordwrap;]:[font = title; inactive; startGroup; ]The Mathematica Wait Cursorby Theodore W. Gray, Notebook Improved by Paul C. Abbott and Kevin McIsaac,Original Concept by Benjamin J. Schwartz;[s]5:0,2;4,1;16,2;28,3;145,0;146,-1;5:1,33,24,Chicago,1,24,0,0,0;1,29,21,New York,3,24,0,0,0;2,29,21,New York,1,24,0,0,0;1,17,12,New York,2,12,0,0,0;0,29,21,New York,1,24,65535,0,0;:[font = text; inactive; ]This Notebook describes how the animated Mathematica Wait Cursor is constructed.  You see this Wait Cursor when the Mathematica Front End is busy. ;[s]6:0,2;41,3;52,2;116,3;127,2;147,0;148,-1;4:1,17,12,Chicago,0,12,0,0,0;0,17,12,Chicago,2,12,0,0,0;3,17,12,New York,0,12,0,0,0;2,17,12,New York,2,12,0,0,0;:[font = text; inactive; ]The idea behind the Wait Cursor is a simulation of a simple physical system.  Using this Notebook, you can imitate the standard Wait Cursor or produce your own generalizations and extensions of it. ;[s]2:0,0;98,0;199,-1;2:2,17,12,New York,0,12,0,0,0;0,17,12,New York,2,12,0,0,0;:[font = section; inactive; startGroup; Cclosed; ]The Science of the Wait Cursor:[font = text; inactive; endGroup; ]The starting point for the Mathematica Wait Cursor is a model of two particles bouncing around in a rectangular box.  The particles are assumed to bounce elastically from the walls of the box, and not to interact with each other.  The trajectories of the particles are determined by their initial positions and velocities.The actual Wait Cursor image is produced by drawing a line between the two particles at regular time intervals.  To avoid filling up the whole image with lines, older lines are removed as newer ones are added.  The Mathematica Wait Cursor keeps 8 lines visible at any given time.The Poincaré Recurrence Theorem guarantees that a system such as the one modeled here will always eventually return to its initial configuration.  In order to make the Wait Cursor as interesting as possible, initial conditions were chosen to maximize the recurrence time.  The Mathematica Wait Cursor in fact has a cycle of 910 different images.  Different initial conditions can give different recurrence times. ;[s]9:0,2;27,3;39,2;352,2;539,3;551,2;882,3;893,2;1018,0;1019,-1;4:1,17,12,Chicago,0,12,0,0,0;0,17,12,Chicago,2,12,0,0,0;5,17,12,New York,0,12,0,0,0;3,17,12,New York,2,12,0,0,0;:[font = section; inactive; startGroup; Cclosed; ]Initial Conditions:[font = text; inactive; ]DrawCursor (which produces a time exposure) and AnimateCursor (which follows the motion of the line joining the particles) are defined in the Implementation section of this Notebook.  Using these functions  and your choice of startingPoint you can construct arbitrary Wait Cursor images.  ;[s]6:0,2;10,0;48,2;61,0;226,2;239,0;290,-1;4:3,17,12,New York,0,12,0,0,0;0,17,12,New York,1,12,0,0,0;3,14,10,Courier,1,12,0,0,0;0,17,12,New York,2,12,0,0,0;:[font = text; inactive; ]The Mathematica Wait Cursor uses these initial conditions (but with a different size bounding box):;[s]5:0,1;4,2;15,1;32,1;99,0;100,-1;4:1,17,12,New York,0,12,0,0,0;3,17,12,New York,0,12,0,0,0;1,17,12,New York,2,12,0,0,0;0,17,12,New York,0,12,0,0,0;:[font = input; ]startingPoint={{1,    (* x of particle 1 *)                2,    (* x velocity of particle 1 *)                0, 	  (* left wall for particle 1 *)                100}, (* right wall for particle 1 *)                              {1,    (* y of particle 1 *)                1,    (* y velocity of particle 1 *)                0,    (* bottom wall for particle 1 *)                100}, (* top wall for particle 1 *)                              {1,    (* x of particle 2 *)                1,    (* x velocity of particle 2 *)                0,    (* left wall for particle 2 *)                100}, (* right wall for particle 2 *)                              {1,    (* y of particle 2 *)                4,    (* y velocity of particle 2 *)                0,    (* bottom wall for particle 2 *)                100}};(* top wall for particle 2 *):[font = text; inactive; endGroup; ]Try supplying startingPoint and the required number of time steps to DrawCursor.  For AnimateCursor there is an optional third argument that specifies how many lines are to be displayed in each frame.  Some examples are given below.  Before trying  your own examples, be sure to evaluate the initialization cells in this Notebook (see the Action Menu).;[s]10:0,1;14,4;27,1;28,0;66,1;69,4;79,1;82,0;86,4;99,0;353,-1;5:3,17,12,New York,0,12,0,0,0;4,17,12,New York,0,12,0,0,0;0,17,12,New York,1,12,0,0,0;0,14,10,Courier,0,12,0,0,0;3,14,10,Courier,1,12,0,0,0;:[font = section; inactive; startGroup; Cclosed; pageBreak; nowordwrap; ]Examples:[font = subsection; inactive; startGroup; Cclosed; nowordwrap; ]DrawCursor:[font = input; startGroup; ]DrawCursor[startingPoint, 100];:[font = postscript; inactive; PICT; pictureID = 15473; output; endGroup; endGroup; pictureWidth = 249; pictureHeight = 249; preserveAspect; ]:[font = subsection; inactive; startGroup; Cclosed; pageBreak; nowordwrap; ]AnimateCursor:[font = input; noPageBreak; ]startingPoint = {{1, 8, 0, 100}, {1, 4, 0, 100},                 {1, 4, 0, 100}, {1, 16, 0, 100}};:[font = input; ]AnimateCursor[startingPoint,26,6];:[font = postscript; inactive; PICT; pictureID = 28944; output; startGroup; Cclosed; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 2951; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 10227; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 422; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 10023; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 28346; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 16052; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 6506; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 23383; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 30854; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 7783; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 22298; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 6453; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 23116; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 29967; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 651; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 16221; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 11518; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 246; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 20368; output; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = postscript; inactive; PICT; pictureID = 29244; output; endGroup; pictureLeft = 31; pictureWidth = 173; pictureHeight = 173; preserveAspect; ]:[font = text; inactive; endGroup; ]This animation looks best run cyclically at about 16 frames per second.  To run it, select the bracket with the triangle and press Y.;[s]3:0,0;131,1;133,0;135,-1;2:2,17,12,New York,0,12,0,0,0;1,17,12,Chicago,0,12,0,0,0;:[font = subsection; inactive; startGroup; Cclosed; pageBreak; nowordwrap; ]A Further Example:[font = text; inactive; noPageBreak; ]Note that the two particles can have different bounding boxes, e.g.;[s]2:0,1;67,0;68,-1;2:1,17,12,New York,0,12,0,0,0;1,17,12,New York,0,12,0,0,0;:[font = input; ]startingPoint ={{0, 10, 0, 200}, {1, 9, 0, 500},                {300, -10, 300, 500},{1, 10, 0,500}};:[font = input; startGroup; ]DrawCursor[startingPoint, 200];:[font = postscript; inactive; PICT; pictureID = 8060; output; endGroup; endGroup; endGroup; pictureWidth = 250; pictureHeight = 250; preserveAspect; ]:[font = section; inactive; startGroup; Cclosed; pageBreak; ]Implementation:[font = text; inactive; ]DrawCursor and MakeCursor are defined using two simpler functions, BounceOffWall, and NextStep.  AnimateCursor uses MakeCursor to produce a sequence of graphics that can be animated.;[s]12:0,2;10,0;15,2;25,0;67,2;80,0;86,2;94,0;97,2;110,0;116,2;126,0;183,-1;3:6,17,12,New York,0,12,0,0,0;0,17,12,New York,1,12,0,0,0;6,14,10,Courier,1,12,0,0,0;:[font = subsubsection; inactive; startGroup; Cclosed; ]BounceOffWall;[s]4:0,1;6,0;9,1;13,0;14,-1;3:2,14,10,New York,1,10,0,0,0;2,14,10,New York,1,10,0,0,0;0,14,10,New York,1,10,0,0,0;:[font = text; inactive; ]BounceOffWall takes a coordinate, a velocity, and two boundary values, and calculates the next coordinate value.  If the coordinate moves outside the boundary values, it is "bounced" backwards, and the velocity is reversed.  The four values are given in a list of the form:                                    {x, v, xMin, xMax}where x is the coordinate, v is the velocity, and xMin and xMax are the boundary values.;[s]15:0,3;13,1;309,2;310,3;328,1;335,3;336,1;355,0;356,3;357,1;379,3;383,1;388,3;392,1;417,0;418,-1;4:2,17,12,New York,0,12,0,0,0;6,17,12,New York,0,12,0,0,0;1,17,12,New York,0,12,0,0,0;6,16,12,New York,1,12,0,0,0;:[font = input; initialization; endGroup; ]*)BounceOffWall[{x_, v_, xMin_, xMax_}] := Block[{lx = x + v},       If[lx > xMax, {2 xMax - lx, -v, xMin, xMax},           If[lx < xMin, {2 xMin - lx, -v, xMin, xMax},                         {lx, v, xMin, xMax}]]];(*:[font = subsubsection; inactive; startGroup; Cclosed; ]NextStep;[s]2:0,1;8,0;9,-1;2:1,14,10,New York,1,10,0,0,0;1,14,10,New York,1,10,0,0,0;:[font = text; inactive; ]NextStep takes a list of four lists of the form {x, v, xMin, xMax}, and applies BounceOffWall to each in turn.  This list of four sublists specifies the positions and velocities of the two particles.;[s]7:0,2;8,1;48,2;66,1;80,2;93,1;199,0;200,-1;3:1,17,12,New York,0,12,0,0,0;3,17,12,New York,0,12,0,0,0;3,16,12,New York,1,12,0,0,0;:[font = input; initialization; endGroup; ]*)NextStep[{{x1_, vx1_, x1Min_, x1Max_},           {y1_, vy1_, y1Min_, y1Max_},           {x2_, vx2_, x2Min_, x2Max_},           {y2_, vy2_, y2Min_, y2Max_}}] :=                   {BounceOffWall[{x1, vx1, x1Min, x1Max}],         BounceOffWall[{y1, vy1, y1Min, y1Max}],         BounceOffWall[{x2, vx2, x2Min, x2Max}],         BounceOffWall[{y2, vy2, y2Min, y2Max}]        }(*:[font = subsubsection; inactive; startGroup; Cclosed; ]DrawCursor;[s]2:0,1;10,0;11,-1;2:1,14,10,New York,1,10,0,0,0;1,14,10,New York,1,10,0,0,0;:[font = text; inactive; ]DrawCursor displays a time exposure of the line joining the two particles over the specified time span.;[s]3:0,2;10,1;103,0;104,-1;3:1,17,12,New York,0,12,0,0,0;1,17,12,New York,0,12,0,0,0;1,16,12,New York,1,12,0,0,0;:[font = input; initialization; endGroup; ]*)DrawCursor[initialPoint:{{_,_,x1Min_, x1Max_},                         {_,_,y1Min_, y1Max_},                         {_,_,x2Min_, x2Max_},                         {_,_,y2Min_, y2Max_}},           timeSpan_] :=           Show[Graphics[     Map[Line[{{#[[1]][[1]], #[[2]][[1]]},               {#[[3]][[1]], #[[4]][[1]]}}]&,     NestList[NextStep, initialPoint, timeSpan]],      PlotRange->{{Min[x1Min, x2Min],                   Max[x1Max, x2Max]},                  {Min[y1Min, y2Min],                   Max[y1Max, y2Max]}},     AspectRatio->Automatic, Framed-> True]];(*:[font = subsubsection; inactive; startGroup; Cclosed; ]MakeCursor;[s]2:0,2;10,0;11,-1;3:1,14,10,New York,1,10,0,0,0;0,14,10,New York,1,10,0,0,0;1,14,10,New York,1,10,0,0,0;:[font = text; inactive; ]MakeCursor computes the motion of both particles and produces a list of all the lines that are to be displayed.  ;[s]3:0,3;10,0;113,0;114,-1;4:2,17,12,New York,0,12,0,0,0;0,17,12,New York,1,12,0,0,0;0,14,10,Courier,0,12,0,0,0;1,14,10,Courier,1,12,0,0,0;:[font = input; initialization; endGroup; ]*)MakeCursor[initialPoint:{{_,_,x1Min_, x1Max_},                         {_,_,y1Min_, y1Max_},                         {_,_,x2Min_, x2Max_},                         {_,_,y2Min_, y2Max_}},           timeSpan_,keepNumber_] :=               Block[{data}, 	     data = Map[Line[{{#[[1]][[1]], #[[2]][[1]]},                        {#[[3]][[1]], #[[4]][[1]]}}]&,                  NestList[NextStep,initialPoint,                           timeSpan]]; 						data = Transpose[NestList[RotateLeft, data,  																																keepNumber-1]]; 						Drop[data,-keepNumber] ];(*:[font = subsubsection; inactive; startGroup; Cclosed; ]AnimateCursor ;[s]3:0,2;13,1;14,0;15,-1;3:1,14,10,New York,1,10,0,0,0;1,14,10,New York,1,10,0,0,0;1,14,10,New York,1,10,0,0,0;:[font = text; inactive; ]AnimateCursor generates a series of graphics cells, with each cell displaying a subset of the MakeCursor lines.;[s]4:0,1;13,0;94,1;104,0;112,-1;2:2,17,12,New York,0,12,0,0,0;2,14,10,Courier,1,12,0,0,0;:[font = input; initialization; endGroup; endGroup; endGroup; ]*)AnimateCursor[initialPoint:{{_,_,x1Min_, x1Max_},                            {_,_,y1Min_, y1Max_},                            {_,_,x2Min_, x2Max_},                            {_,_,y2Min_, y2Max_}},              timeSpan_,keepNumber_:8] :=               Map[Show[Graphics[#1,           PlotRange->{{Min[x1Min, x2Min], 		        		           Max[x1Max, x2Max]}, 		                    {Min[y1Min, y2Min], 		                     Max[y1Max, y2Max]}},          AspectRatio->1, Framed -> True]]&,     MakeCursor[initialPoint, timeSpan,                     keepNumber] ];(*;[s]2:0,1;577,0;578,-1;2:1,17,12,Chicago,1,12,0,0,0;1,14,10,Courier,1,12,0,0,0;^*)