(*^Frequency AnalysisRaw Datacodentemp = ReadList["ntemp.txt",{Number,Number}];dataplot=ListPlot[ntemp,Frame->True, AxesOrigin->{9,29}, 							PlotStyle->{PointSize[.004] }];Show[dataplot];Resampling: n=256 binscoldat=Transpose[ntemp];Td=coldat[[1]];Yd=coldat[[2]];binMax=256;Trange=Max[Td]-Min[Td];tbin = Trange/binMax;yd = Table[0,{binMax}];td = Table[0,{binMax}];Do[ td[[j]] = tbin*(j-1) + Min[Td], {j,1,binMax}] ;	Do[		Do[				If[ Td[[i]] <= td[[j]] <= Td[[i+1]],						yd[[j]] = Yd[[i]]+				(td[[j]]-Td[[i]])*(Yd[[i+1]]-Yd[[i]])/(Td[[i+1]]-Td[[i]]),			],						{j,1,binMax}			],				{i,0,Length[Td]-1}	](* write results to file *)stream1=OpenWrite["resampled.dat", FormatType->OutputForm]Do[	Write[stream1, td[[j]],"  ", yd[[j]] ],	{j,1,binMax}	]Close[stream1];OutputStream[resampled.dat, 4]!!resampled.datdat= Transpose[{td,yd} ];newplot =ListPlot[dat,Frame->True, AxesOrigin->{9,29}, 						PlotStyle->{PointSize[.001]}];Show[dataplot,newplot];Cubic Interpolationcodeinterpol = Interpolation[ntemp, InterpolationOrder->3];interplot = Plot[interpol[x],{x,Min[Td], Max[Td]}, Frame->True];Show[interplot];Fourier Spectrogramcodefourierplot=ListPlot[Abs[Fourier[dat] ] , Frame->True, 						PlotStyle->{PointSize[.005]} ];Show[fourierplot];zBdataf=Table[N[Sin[30 2 Pi n/256] + (Random[]-1/2)], {n,256}];ListPlot[dataf, PlotJoined->True];ListPlot[Abs[Fourier[dataf] ], PlotJoined->True, PlotRange->All];Convolution Filtering: ntemp*kernelcodekern=Table[N[Exp[-200(n/256)^2]], {n,256}];conv=InverseFourier[Fourier[dat] Fourier[kern] ];convplot= ListPlot[Chop[conv], Frame->True, AxesOrigin->{9,29}, 						PlotStyle->{PointSize[.002]} ];zBdatab=Table[N[BesselJ[1,10 n/256] + .2(Random[] -1/2)],  {n,256}];ListPlot[datab]datfun=Interpolation[datab]InterpolatingFunction[{1, 256}, <>]Plot[datfun[x],{x,1,256}];ListPlot[Abs[Fourier[datab]], PlotJoined->True ];kern=Table[N[Exp[-200(n/256)^2]], {n,256}];ListPlot[kern,  PlotRange->All];ListPlot[Abs[Fourier[kern]], PlotJoined->True ];conv=InverseFourier[Fourier[datab] Fourier[kern] ];ListPlot[Chop[conv]];^*)