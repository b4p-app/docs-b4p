/*----------------------------------------------------------------------------*/const float	Missing= -999;	//missing data valueconst char	lineSeparator[]="_______________________________________________________________________________";const char	pageUp[]= "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";const char	scrollUp[]= "\n\n\n\n\n";int stringlen( char* string ) 		{		int i=0;		while(  string[i] != '\0' )  i++;		return i;		};/*----------------------------------------------------------------------------*//** FUNCTION:  ToWords** Converts string to array of null terminated words.* Missing values are assigned to -999.* reference = alias = resolved address = value at specific address**/void ToWords( char *line, char** array, int &words, int &colons,int *colonLoc ){	int i,j,k;	//initialize character array to all nullspace	for(i=0; i<=99; i++)		{		for(j=0; j<=19; j++) 	array[i][j]='\0';									}				words=1;								//delimiter/word index	colons=0;								//colon count											//colonLoc= colon locatins, in words	i=1;									//character in line index	k=1;									//character in word index	//assign i=0 character in line buf because start while loop at i=1	array[words][0]=(char)line[0];	while( (char)line[i] !='\0' ) 		{		char PREV =(char)line[i-1];		char CURR =(char)line[i];		char NEXT =(char)line[i+1];				switch  ( CURR  )			{			case '+':	//eat any of these characters			case '/':			case '¥':				goto END_OF_SWITCH;			case ' ':				if( NEXT ==' ')					//skip spaces until get to rightmost one					goto END_OF_SWITCH;				else							//is end of a word					{					array[words][k]='\0';		//null terminate end of word					k=0;						//reset word char counter										words++;					//increment word index					goto END_OF_SWITCH;					}			case '\t':					case ',':			case ':':				{				if( CURR ==':') 					{					colons++;					colonLoc[colons]=words;					}									if( NEXT == '\n' || NEXT == '\r' )					{						array[words][0]= '-';	// - 9 9 9 \0  for Missing						array[words][1]= '9';						array[words][2]= '9';						array[words][3]= '9';						array[words][4]= '\0';	//string is null terminated						words++;						goto END_OF_SWITCH;					}				else //if( NEXT != '\n' && NEXT != '\r')					{					switch( PREV  )						{						case ' ':										case '\t':						case ',':						case ':':						case '¥':							array[words][0]= '-';	// - 9 9 9 \0  for Missing							array[words][1]= '9';							array[words][2]= '9';							array[words][3]= '9';							array[words][4]= '\0';	//string is null terminated							words++;																goto END_OF_SWITCH;						default:							array[words][k]='\0';	//null terminate end of word							k=0;					//reset word char counter							words++;							goto END_OF_SWITCH;						}					}									}							case '\n':			case '\r':				{				switch( PREV  )					{					case '\t':									case '¥':						array[words][0]= '-';	// - 9 9 9 \0  for Missing						array[words][1]= '9';						array[words][2]= '9';						array[words][3]= '9';						array[words][4]= '\0';	//null terminate end of word						words++;						goto END_OF_SWITCH;					default:						goto END_OF_SWITCH;		//do nothing					}				}			default:				array[words][k]= CURR;				k++;								if( NEXT=='\0' )					{					array[words][k]='\0';					}				break;			END_OF_SWITCH:				break;				//do nothing,just get out of inner&outer switch			}		i++;			}	};		/*----------------------------------------------------------------------------*/void msgBoxed(char msg_text[] )	{	char end_delim[] = "*";	char horiz_delim[]="*";	int i=0, len=40; 	while( msg_text[i] != '\0') i++;	int ends= (len-i)/2;	cout<<"\t"<<end_delim;				//horiz line	for(i=0; i<= len; i++) cout<<horiz_delim; 			cout<<end_delim<<endl;						cout<<"\t"<<end_delim;				//space line	for(i=0;i<=len;i++) cout<<" "; 		cout<<end_delim<<endl;		cout<<"\t"<<end_delim;				//msg line	for(i=0;i<=ends;i++)cout<<" ";	cout<<msg_text;	for(i=0;i<ends;i++)cout<<" ";	cout<<end_delim<<endl;		cout<<"\t"<<end_delim;				//space line	for(i=0;i<=len;i++) cout<<" "; 		cout<<end_delim<<endl;	cout<<"\t"<<end_delim;				//horiz line	for(i=0; i<= len; i++) cout<<horiz_delim; 			cout<<end_delim<<endl;		};		/*----------------------------------------------------------------------------*/