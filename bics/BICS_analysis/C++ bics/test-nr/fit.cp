/* *** Given a set of data points x[1...ndata], y[1...ndata] with individual* standard deviations sig[1...ndata], fit them to a straight line * y = a + bx, by minimizing chi^2. Returned are a,b and their respective * uncertainties siga,sigb, the chi-square chi2, and the goodnes-of-fit * probability q (that the fit would have chi^2 this large or larger).* * If mwt=0 on input, then the standard deviations sig[1...ndata] are * assumed to be unavailable;: q is returned as 1.0 and the normalization* of chi2 is to unit standard deviation on all points.***/#include <math.h>#define NRANSI#include "nr_util.h"void fit(float x[], float y[], int ndata, int lag, float sig[], int mwt, 	float *a,float *b, float *siga, float *sigb, float *chi2, float *q){	float gammq(float a, float x);	int i,nlag=0;	float wt,t,sxoss,sx=0.0,sy=0.0,st2=0.0,ss,sigdat;	char ans;		nlag = abs(lag);			//number of lags	ndata = ndata - nlag;	//adjusted number of data points	//increment pointers to lag data	if(lag>0) {		for(i=1;i<=nlag;i++) 	y++;	}	if(lag<0) {		for(i=1;i<=nlag;i++)	x++;	}//begin calculations	*b=0.0;	if (mwt) {		ss=0.0;		for (i=1;i<=ndata;i++) {			wt=1.0/SQR(sig[i]);			ss += wt;			sx += x[i]*wt;			sy += y[i]*wt;		}	} else {		for (i=1;i<=ndata;i++) {			sx += x[i];			sy += y[i];		}		ss=ndata;	}	sxoss=sx/ss;	if (mwt) {		for (i=1;i<=ndata;i++) {			t=(x[i]-sxoss)/sig[i];			st2 += t*t;			*b += t*y[i]/sig[i];		}	} else {		for (i=1;i<=ndata;i++) {			t=x[i]-sxoss;			st2 += t*t;			*b += t*y[i];		}	}	*b /= st2;	*a=(sy-sx*(*b))/ss;	*siga=sqrt((1.0+sx*sx/(ss*st2))/ss);	*sigb=sqrt(1.0/st2);	*chi2=0.0;	if (mwt == 0) {		for (i=1;i<=ndata;i++)			*chi2 += SQR(y[i]-(*a)-(*b)*x[i]);		*q=1.0;		sigdat=sqrt((*chi2)/(ndata-2));		*siga *= sigdat;		*sigb *= sigdat;	} else {		for (i=1;i<=ndata;i++)			*chi2 += SQR((y[i]-(*a)-(*b)*x[i])/sig[i]);		*q=gammq(0.5*(ndata-2),0.5*(*chi2));	}	//restore pointers to data	if(lag>0) {			for(i=1;i<=nlag;i++) 	y--;	}	if(lag<0) {			for(i=1;i<=nlag;i++) 	x--;	}			}#undef NRANSI/* (C) Copr. 1986-92 Numerical Recipes Software 2-2. */