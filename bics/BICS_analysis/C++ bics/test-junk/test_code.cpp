/*	cout<<"enter total columns (ALL TYPES): ";	cin >> COLS;	 	int long COLS_float=COLS;	int long COLS_skip =0L;	cout<<"Enter number of NON-FLOAT data columns."<<endl		<<"(includes time hh:mm:ss, date mm/yy/dd, or text): ";	cin>> COLS_skip;	if( COLS_skip != 0)		{		cout<<"Skip first "<<COLS_skip<<" tab delimited columns? Y/N:";		cin>> ansYN;		if( toupper(ansYN) == 'Y' )			{			COLS_float = COLS - COLS_skip;			cout<<"Reducing number of active columns from: "<<COLS<<endl				<<"To float columns only: "<<COLS_float<<endl;			}		}	COLS = COLS_float;	*/	/* function to select single column from data matrix, removing missing data (MD).Initially use scratch vector to hold temporary values; then copy into smaller vecof length numvalid.*/float* v_data(float** data,  long colSel, long row_beg, long row_end, long* numvalid)	{	//create scratch vector v 	long int DIM = row_end  - row_beg +1+NR_END;   	float *v;	v=( float *) new float [DIM];	if (v == NULL)  nrerror("allocation failure for vector()");	v = v + NR_END;			/* reassign values to rows */	int counter =1;	for(int i= row_beg; i <= row_end; i++, counter++)		{		if( data[i][colSel] != Missing)			{			v[counter] = data[i][colSel];			}		}	*numvalid = counter-1;		/*allocate pointers to non-missing data */	long DIM = *numvalid + NR_END;		float *vec;	vec= (float *) new float[ DIM];	if (vec == NULL) nrerror("allocation failure for vec()");		/*reassign nonmissing data to smaller vector*/	for(i=1; i <= *numvalid; i++)  vec[i] = v[i];		return vec;	}		//	int		num;//	char	text[20];	//	ofstream	ofs("outfile");		//write only//	for (char letter = 'A'; letter <= 'H'; letter++)	//	ofs << letter;//	ofs.close();//	ifstream	ifs("infile");		//read only	//	ifs >> i >> j >> k;//	ifs.close();	fstream	iof;	iof.open("iofile");				//open read/write	iof << "123456789_abcdfghijk"<<1956;	iof.seekg(0, ios::beg);			//move read pointer 									//to beginning of file	iof >> text >> num;	iof.close();	cout<< text << num<< endl;   fstream letters( "outfile", ios::in | ios::out );   letters.seekp(8, ios::beg);   for (char let = 'I'; let <= 'Z'; let ++)		letters << let;     	letters.seekg(0, ios::beg);		//rewind	while (! letters.eof())			//display to console	cout.put((char)letters.get());	letters.close();/* ref: rob cope: use malloc to create pointer to enough memory required - find out physical (not logical) sizeof file from library function.float * x =(float *)malloc (how much memory needed)x[rows][cols]memset * x*/