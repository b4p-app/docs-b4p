/*Title:		stripfile.cpPurpose:	removes specified columns from data file and 			writes a new data file with -999 as missing valuesAuthor:		RMRDate:		4.16.96*/#include <iostream.h>				// cin,cout#include <stdio.h>					// NR headers#include <stddef.h>#include <stdlib.h>#include <strstream.h>				//string streams#include <fstream.h>				//stream manager#include <ctype.h>					//isalpha, isspace#define  NRANSI						//***must have to load memory.cp***#include "memory.h"					//RMR-NRUTIL#include "memory.cp"				//RMR-NRUTILvoid main(void){	char			word[20];		//character array	char			var[100][20];	//character array of 50 words	char			ansYN;			//single char answer	char 			line0[1024];	//line buffer, holds 1024 chars		char 			line[1024];		//line buffer, holds 1024 chars									//but grabs up to nullterm (\0) only	char			filename[40];	//file name, max length 40 chars	long int		i = 0L;			//counter	long int		j = 0L;			//counter	long int 		k = 0L;			//counter	long int		skiprow;		//printing rows skipped	float			value=0;		//data value	long int		ROWS=0L;		//num rows	long int		COLS=0L;		//num colums	long int		DIM=0L;			//num data points	long int		start=0L;		//unsigned long int - for pointers in fstream//startup message	cout<<lineSeparator<<endl<<scrollUp;	cout<<"REQUIRED FILE FORMAT"<<endl		<<"Data:              FLOAT"<<endl		<<"Delimiters:        TAB  "<<endl		<<"Missing:           -999"<<endl		<<"NL/CR:             DOS format"<<endl		<<"Variable names in first row"<<endl		<<"No NL/CR at end of last row"<<scrollUp;		//open input stream	cout<< "Enter input file name ->";	cin >> filename;		//"dir:subdir:filename"	ifstream	INFILE0;						INFILE0.open (filename, ios::in);	if 	( INFILE0.fail() )  nrerror("error opening file");			//display first three rows	else		{		cout	<<"first three rows:"<<endl<<lineSeparator<<endl;		for (i=0 ;i<3; i++)			{			ROWS++;			INFILE0.getline( line, sizeof(line) );	//be sure is DOS \n format			cout	<<line<<endl<<lineSeparator<<endl;			};		while ( ! INFILE0.eof()  )			{			ROWS++;			INFILE0.getline( line, sizeof(line) );			}		}	INFILE0.close();	//open file again				ifstream	INFILE(filename, ios::in);	//open instream to file	INFILE.getline(line0, sizeof(line0) ); 	//set stream pointer to first data line	//get second line of data	INFILE.getline(line,sizeof(line) );		int tabcount=0;	for( i=0; (char) line[i] != '\0'; i++) 		{		if(  (char)line[i] == '\t' )			{			if( (char)line[i-1] == '\t' )				cout<<-999<<"\t";			else				cout<< (char)line[i];			tabcount++;							}		else			{			cout<<(char)line[i];			}		}	COLS=tabcount;//display file stats	cout<<lineSeparator<<endl;		cout<<"\t Total ROWS : "<<ROWS<<endl;		cout<<"\t Total COLS : "<<COLS<<endl;		int	tabSkip=0;			cout<<"Skip first N columns:";	cin>>tabSkip;	COLS=COLS-tabSkip;	cout<<"New number of columns: "<< COLS<<endl;//open output stream	char ofilename[40];						//file name, max length 40 chars	cout<<"Enter output file name:";	cin>>ofilename;	ofstream	OUTFILE( ofilename, ios::out);	if 	( OUTFILE.fail() )  nrerror("error opening output file");//	OUTFILE<<line0<<endl;					//write variable names to output file				//get third to final line of input  datafor(k=1; k<ROWS-2; k++) 	{	INFILE.getline(line,sizeof(line) );		//get next line of data	tabcount=0;	i=0;	while( (char) line[i] != '\0' ) 		//process line while not null terminator		{		if(  (char)line[i] == '\t')			{			tabcount++;			if( tabcount <= tabSkip)				{				//do nothing if < tab skip value				}			else				{				if( (char)line[i-1] == '\t' ) 					{ 					OUTFILE <<-999<<"\t";					}				else 					{					OUTFILE<<(char)line[i];					}				}			}		else			{			if( tabcount < tabSkip)				{				//do nothing				}			else				{				OUTFILE <<(char)line[i];				}			}		i++;					}	OUTFILE <<endl;	if(  ( k % 100 )== 0) cout<<k<<"...";	}	cout<<endl<<"finished writing file"<<endl;	INFILE.close();OUTFILE.close();nrerror("closed in/out streams");return;				//nothing: main's type is void}			